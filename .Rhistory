# Lê atributos das parcelas
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_parcelas.shp")     # shape com parcelas
parcelasComGeo <- read_sf(shpArq) %>%               # completo com geom
select("Fazenda", "ID_Talhao", "SUBTALHAO", "NUMPARCELA", "AREAPARCEL",
"NUMMEDICAO", "ANOREF", "DATAREALIZ", "IDINV",
"MHDOM", "VTCC", "geometry") %>%
rename(fazenda = Fazenda, bloco = ID_Talhao, talhao= SUBTALHAO,
parcela= NUMPARCELA, areapar= AREAPARCEL, medicao= NUMMEDICAO,
anoinv= ANOREF, datinv= DATAREALIZ, idade= IDINV)
parcelasSemGeo <- tibble(sf::st_drop_geometry(parcelasComGeo)) # s/geom
parcelasSemGeo
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PRJ_Modelo_Dados: Inventário da Fazenda Modelo  ~~~~~~~~~~~~~~~~~~~~~
#
# Autor: Luiz Carlos Estraviz Rodriguez
#        Otávio Magalhães Silva Souza
#        Departamento de Ciências Florestais
#        ESALQ/USP - 22/Set/2024
#
#   - download dos dados mantidos em um repositório github público
#      - shape files dos talhões e das parcelas de inventário
#   - sugestão de pasta para armazenamento local:
#        C:/LiDAR/PRJ_Modelo/DADOS
#
# Linguagem de programação:
#       R (v 4.3)
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list=ls(all=TRUE))                                   # Limpa memória
gc()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Leitura e organização de dados
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ----
if(!require(tidyverse))  # Para melhor manipulação de dados e funções
install.packages("tidyverse")
library(tidyverse)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Download do shape da Fazenda Modelo (2 layers: talhoes e parcelas)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gitOnde <- "https://github.com/FlorestaR/dados/blob/main/5_LIDARF/Modelo/SHAPES"
gitNome <- "fazmodelo.zip"
gitArqv <- file.path(gitOnde, gitNome) %>% paste0("?raw=true")
tmpd <- tempdir(check = TRUE)                    # diretório temporário
zipf <- file.path(tmpd, "shapes.zip")              # arquivo temporário
options(timeout=1000) # Reset timeout oferecendo mais tempo de download
if(!file.exists(zipf))  # garante download de dados binários (wb)
download.file(gitArqv, mode="wb", destfile = zipf)
unzip(zipf, exdir = tmpd)     # shape é unziped no diretório temporário
unlink(zipf)                                  # deleta o arquivo zipado
if(!require(sf))                           # Para manipulação de shapes
install.packages("sf")
library(sf)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos dos talhoes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_talhoes.shp")       # shape com talhões
talhoesComGeo <- read_sf(shpArq) %>%                # completo com geom
rename(fazenda = FAZENDA, bloco = TALHAO,
talhao = SUBTALHAO, area = AREA)                       # s/ geom
talhoesSemGeo <- tibble(sf::st_drop_geometry(talhoesComGeo))
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos das parcelas
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_parcelas.shp")     # shape com parcelas
parcelasComGeo <- read_sf(shpArq) %>%               # completo com geom
select("Fazenda", "ID_Talhao", "SUBTALHAO", "NUMPARCELA", "AREAPARCEL",
"NUMMEDICAO", "ANOREF", "DATAREALIZ", "IDINV",
"MHDOM", "VTCC", "geometry") %>%
rename(fazenda = Fazenda, bloco = ID_Talhao, talhao= SUBTALHAO,
parcela= NUMPARCELA, areapar= AREAPARCEL, medicao= NUMMEDICAO,
anoinv= ANOREF, datinv= DATAREALIZ, idade= IDINV)
parcelasSemGeo <- tibble(sf::st_drop_geometry(parcelasComGeo)) # s/geom
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Reorganiza colunas da tabela "parcelas" e acrescenta coluna fase
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
parcelas <- parcelasSemGeo %>% arrange(parcela)
n        <- count(parcelas)
fase     <- rep(1:1, n)
parcelas <- cbind(fase, parcelas)
View(parcelas)
View(parcelas)
parcelasSemGeo %>% arrange(parcela) %>% mutate('area', round, 2))
parcelasSemGeo %>% arrange(parcela) %>% mutate('area', round, 2)
parcelasSemGeo %>% arrange(parcela) %>%
mutate(across(c('areapar'), round, 2))
parcelasSemGeo %>% arrange(parcela) %>%
mutate(c('areapar'), round, 2)
parcelasSemGeo %>% mutate('areapar', round, 2) %>%
arrange(parcela)
parcelasSemGeo %>% arrange(parcela)
parcelasSemGeo
parcelasSemGeo %>% arrange(parcela)
parcelas$area
round(parcelas$area, 0)
parcelas$area <- round(parcelas$area, 0)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PRJ_Modelo_Dados: Inventário da Fazenda Modelo  ~~~~~~~~~~~~~~~~~~~~~
#
# Autor: Luiz Carlos Estraviz Rodriguez
#        Otávio Magalhães Silva Souza
#        Departamento de Ciências Florestais
#        ESALQ/USP - 22/Set/2024
#
#   - download dos dados mantidos em um repositório github público
#      - shape files dos talhões e das parcelas de inventário
#   - sugestão de pasta para armazenamento local:
#        C:/LiDAR/PRJ_Modelo/DADOS
#
# Linguagem de programação:
#       R (v 4.3)
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list=ls(all=TRUE))                                   # Limpa memória
gc()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Leitura e organização de dados
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ----
if(!require(tidyverse))  # Para melhor manipulação de dados e funções
install.packages("tidyverse")
library(tidyverse)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Download do shape da Fazenda Modelo (2 layers: talhoes e parcelas)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gitOnde <- "https://github.com/FlorestaR/dados/blob/main/5_LIDARF/Modelo/SHAPES"
gitNome <- "fazmodelo.zip"
gitArqv <- file.path(gitOnde, gitNome) %>% paste0("?raw=true")
tmpd <- tempdir(check = TRUE)                    # diretório temporário
zipf <- file.path(tmpd, "shapes.zip")              # arquivo temporário
options(timeout=1000) # Reset timeout oferecendo mais tempo de download
if(!file.exists(zipf))  # garante download de dados binários (wb)
download.file(gitArqv, mode="wb", destfile = zipf)
unzip(zipf, exdir = tmpd)     # shape é unziped no diretório temporário
unlink(zipf)                                  # deleta o arquivo zipado
if(!require(sf))                           # Para manipulação de shapes
install.packages("sf")
library(sf)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos dos talhoes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_talhoes.shp")       # shape com talhões
talhoesComGeo <- read_sf(shpArq) %>%                # completo com geom
rename(fazenda = FAZENDA, bloco = TALHAO,
talhao = SUBTALHAO, area = AREA)                       # s/ geom
talhoesSemGeo <- tibble(sf::st_drop_geometry(talhoesComGeo))
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos das parcelas
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_parcelas.shp")     # shape com parcelas
parcelasComGeo <- read_sf(shpArq) %>%               # completo com geom
select("Fazenda", "ID_Talhao", "SUBTALHAO", "NUMPARCELA", "AREAPARCEL",
"NUMMEDICAO", "ANOREF", "DATAREALIZ", "IDINV",
"MHDOM", "VTCC", "geometry") %>%
rename(fazenda = Fazenda, bloco = ID_Talhao, talhao= SUBTALHAO,
parcela= NUMPARCELA, areapar= AREAPARCEL, medicao= NUMMEDICAO,
anoinv= ANOREF, datinv= DATAREALIZ, idade= IDINV)
parcelasSemGeo <- tibble(sf::st_drop_geometry(parcelasComGeo)) # s/geom
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Reorganiza colunas da tabela "parcelas" e acrescenta coluna fase
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
parcelas <- parcelasSemGeo %>% arrange(parcela)
parcelas$area <- round(parcelas$area, 0)
parcelas
parcelasSemGeo
parcelasSemGeo %>% arrange(parcela)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PRJ_Modelo_Dados: Inventário da Fazenda Modelo  ~~~~~~~~~~~~~~~~~~~~~
#
# Autor: Luiz Carlos Estraviz Rodriguez
#        Otávio Magalhães Silva Souza
#        Departamento de Ciências Florestais
#        ESALQ/USP - 22/Set/2024
#
#   - download dos dados mantidos em um repositório github público
#      - shape files dos talhões e das parcelas de inventário
#   - sugestão de pasta para armazenamento local:
#        C:/LiDAR/PRJ_Modelo/DADOS
#
# Linguagem de programação:
#       R (v 4.3)
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list=ls(all=TRUE))                                   # Limpa memória
gc()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Leitura e organização de dados
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ----
if(!require(tidyverse))  # Para melhor manipulação de dados e funções
install.packages("tidyverse")
library(tidyverse)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Download do shape da Fazenda Modelo (2 layers: talhoes e parcelas)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gitOnde <- "https://github.com/FlorestaR/dados/blob/main/5_LIDARF/Modelo/SHAPES"
gitNome <- "fazmodelo.zip"
gitArqv <- file.path(gitOnde, gitNome) %>% paste0("?raw=true")
tmpd <- tempdir(check = TRUE)                    # diretório temporário
zipf <- file.path(tmpd, "shapes.zip")              # arquivo temporário
options(timeout=1000) # Reset timeout oferecendo mais tempo de download
if(!file.exists(zipf))  # garante download de dados binários (wb)
download.file(gitArqv, mode="wb", destfile = zipf)
unzip(zipf, exdir = tmpd)     # shape é unziped no diretório temporário
unlink(zipf)                                  # deleta o arquivo zipado
if(!require(sf))                           # Para manipulação de shapes
install.packages("sf")
library(sf)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos dos talhoes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_talhoes.shp")       # shape com talhões
talhoesComGeo <- read_sf(shpArq) %>%                # completo com geom
rename(fazenda = FAZENDA, bloco = TALHAO,
talhao = SUBTALHAO, area = AREA)                       # s/ geom
talhoesSemGeo <- tibble(sf::st_drop_geometry(talhoesComGeo))
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos das parcelas
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_parcelas.shp")     # shape com parcelas
parcelasComGeo <- read_sf(shpArq) %>%               # completo com geom
select("Fazenda", "ID_Talhao", "SUBTALHAO", "NUMPARCELA", "AREAPARCEL",
"NUMMEDICAO", "ANOREF", "DATAREALIZ", "IDINV",
"MHDOM", "VTCC", "geometry") %>%
rename(fazenda = Fazenda, bloco = ID_Talhao, talhao= SUBTALHAO,
parcela= NUMPARCELA, areapar= AREAPARCEL, medicao= NUMMEDICAO,
anoinv= ANOREF, datinv= DATAREALIZ, idade= IDINV)
parcelasSemGeo <- tibble(sf::st_drop_geometry(parcelasComGeo)) # s/geom
parcelasSemGeo
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PRJ_Modelo_Dados: Inventário da Fazenda Modelo  ~~~~~~~~~~~~~~~~~~~~~
#
# Autor: Luiz Carlos Estraviz Rodriguez
#        Otávio Magalhães Silva Souza
#        Departamento de Ciências Florestais
#        ESALQ/USP - 22/Set/2024
#
#   - download dos dados mantidos em um repositório github público
#      - shape files dos talhões e das parcelas de inventário
#   - sugestão de pasta para armazenamento local:
#        C:/LiDAR/PRJ_Modelo/DADOS
#
# Linguagem de programação:
#       R (v 4.3)
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list=ls(all=TRUE))                                   # Limpa memória
gc()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Leitura e organização de dados
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ----
if(!require(tidyverse))  # Para melhor manipulação de dados e funções
install.packages("tidyverse")
library(tidyverse)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Download do shape da Fazenda Modelo (2 layers: talhoes e parcelas)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gitOnde <- "https://github.com/FlorestaR/dados/blob/main/5_LIDARF/Modelo/SHAPES"
gitNome <- "fazmodelo.zip"
gitArqv <- file.path(gitOnde, gitNome) %>% paste0("?raw=true")
tmpd <- tempdir(check = TRUE)                    # diretório temporário
zipf <- file.path(tmpd, "shapes.zip")              # arquivo temporário
options(timeout=1000) # Reset timeout oferecendo mais tempo de download
if(!file.exists(zipf))  # garante download de dados binários (wb)
download.file(gitArqv, mode="wb", destfile = zipf)
unzip(zipf, exdir = tmpd)     # shape é unziped no diretório temporário
unlink(zipf)                                  # deleta o arquivo zipado
if(!require(sf))                           # Para manipulação de shapes
install.packages("sf")
library(sf)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos dos talhoes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_talhoes.shp")       # shape com talhões
talhoesComGeo <- read_sf(shpArq) %>%                # completo com geom
rename(fazenda = FAZENDA, bloco = TALHAO,
talhao = SUBTALHAO, area = AREA)                       # s/ geom
talhoesSemGeo <- tibble(sf::st_drop_geometry(talhoesComGeo))
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lê atributos das parcelas
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
shpArq <- paste0(tmpd, "/Modelo_parcelas.shp")     # shape com parcelas
parcelasComGeo <- read_sf(shpArq) %>%               # completo com geom
select("Fazenda", "ID_Talhao", "SUBTALHAO", "NUMPARCELA", "AREAPARCEL",
"NUMMEDICAO", "ANOREF", "DATAREALIZ", "IDINV",
"MHDOM", "VTCC", "geometry") %>%
rename(fazenda = Fazenda, bloco = ID_Talhao, talhao= SUBTALHAO,
parcela= NUMPARCELA, areapar= AREAPARCEL, medicao= NUMMEDICAO,
anoinv= ANOREF, datinv= DATAREALIZ, idade= IDINV)
parcelasSemGeo <- tibble(sf::st_drop_geometry(parcelasComGeo)) # s/geom
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Reorganiza colunas da tabela "parcelas" e acrescenta coluna fase
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
parcelas <- parcelasSemGeo %>% arrange(parcela)
parcelas
View(parcelas)
parcelas$areapar <- round(parcelas$areapar, 0)
View(parcelas)
n        <- count(parcelas)
fase     <- rep(1:1, n)
parcelas <- cbind(fase, parcelas)
talhoes <-
parcelasSemGeo %>%
group_by(talhao) %>%
summarise(idade = unique(idade)) %>%
left_join(talhoesSemGeo) %>%
select("talhao", "idade", "area") %>%
arrange(talhao) %>% as.data.frame
talhoesComGeo <- inner_join(talhoesComGeo, talhoes, by="talhao") %>%
select("OBJECTID", "talhao", "idade", "geometry")
rm(talhoesSemGeo, parcelasSemGeo)
View(parcelas)
View(talhoes)
shpArq <- paste0(tmpd, "/Modelo_grid.shp")           # shape com o grid
gridComGeo <- read_sf(shpArq)                       # completo com geom
gridSemGeo <- tibble(sf::st_drop_geometry(gridComGeo))        # s/ geom
grid <-
gridSemGeo %>%
select(gridcell, rowcell, colcell, areacell, talhao, fase, parcela,
medicao, anoinv, idade, MHDOM, VTCC) %>%
arrange(gridcell) %>% as.data.frame
rm(gridSemGeo)
View(grid)
prjNome <- 'PRJ_InvModelo'
dirNome <- paste0('C:/GitRepo/', prjNome)
dir.create(dirNome, showWarnings = F)
dirNome <- paste0(dirNome, '/DADOS/')
dir.create(dirNome, showWarnings = F)
if (!require("remotes")){install.packages("remotes")}
if (!require(rio))      {remotes::install_github("gesistsa/rio")}
library(rio)
# Salva dados em planilha Excel
arqNome <- paste0(dirNome, prjNome, '.xlsx')
export(list(talhoes = talhoes,
parcelas  = parcelas,
grid = grid),
file = arqNome)
# Mostra tabelas no Viewer
# Use o "Export" do Viewer para salvar em diferentes formatos
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if(!require(kableExtra))
install.packages("kableExtra")
library(kableExtra)
# Mostra talhões
AreaTotal <- talhoes$AREA %>% sum
NotaDeRodape <- paste0(": ", AreaTotal)
talhoes %>%
kbl(caption = "Talhões da Fazenda Modelo", align = "r") %>%
kable_classic(full_width = F) %>%
footnote(general = NotaDeRodape,
general_title = "Área total",
footnote_as_chunk = T)
# Mostra parcelas
parcelas %>%
kbl(caption = "Parcelas da Fazenda Modelo", align = "r") %>%
kable_classic(full_width = F)
dirNome <- paste0('C:/GitRepo/', prjNome)
dir.create(dirNome, showWarnings = F)
dirNome <- paste0(dirNome, '/MAPAS/')
dir.create(dirNome, showWarnings = F)
arqNome <- paste0(dirNome, prjNome, '.png')
png(arqNome, 30, 20, 'cm', res = 200)                # abre "impressão"
ggplot() +        #         plot dos talhões e parcelas (cor por idade)
geom_sf(data = talhoesComGeo, colour = "black", fill="white") +
geom_sf(data = parcelasComGeo, aes(fill = factor(IDINV))) +
scale_fill_discrete(name = "Idade") +
guides(fill = guide_legend(reverse=F)) +
coord_sf(datum=st_crs(31983)) +        # Especifica sistema de coord.
scale_y_continuous(breaks = seq(from=7356500,to=7359000, by=200)) +
scale_x_continuous(breaks = seq(from=206200, to=207600,  by=200))
ggplot() +        #         plot dos talhões e parcelas (cor por idade)
geom_sf(data = talhoesComGeo, colour = "black", fill="white") +
geom_sf(data = parcelasComGeo, aes(fill = factor(IDINV))) +
scale_fill_discrete(name = "Idade") +
guides(fill = guide_legend(reverse=F)) +
coord_sf(datum=st_crs(31983)) +        # Especifica sistema de coord.
scale_y_continuous(breaks = seq(from=7356500,to=7359000, by=200)) +
scale_x_continuous(breaks = seq(from=206200, to=207600,  by=200))
ggplot() +        #         plot dos talhões e parcelas (cor por idade)
geom_sf(data = talhoesComGeo, colour = "black", fill="white") +
geom_sf(data = parcelasComGeo, aes(fill = factor(idade))) +
scale_fill_discrete(name = "Idade") +
guides(fill = guide_legend(reverse=F)) +
coord_sf(datum=st_crs(31983)) +        # Especifica sistema de coord.
scale_y_continuous(breaks = seq(from=7356500,to=7359000, by=200)) +
scale_x_continuous(breaks = seq(from=206200, to=207600,  by=200))
arqNome <- paste0(dirNome, prjNome, '.png')
png(arqNome, 30, 20, 'cm', res = 200)                # abre "impressão"
ggplot() +        #         plot dos talhões e parcelas (cor por idade)
geom_sf(data = talhoesComGeo, colour = "black", fill="white") +
geom_sf(data = parcelasComGeo, aes(fill = factor(idade))) +
scale_fill_discrete(name = "Idade") +
guides(fill = guide_legend(reverse=F)) +
coord_sf(datum=st_crs(31983)) +        # Especifica sistema de coord.
scale_y_continuous(breaks = seq(from=7356500,to=7359000, by=200)) +
scale_x_continuous(breaks = seq(from=206200, to=207600,  by=200))
dev.off()                                # fecha "impressão" do aquivo
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PRJ_Modelo_Inv1: Inventário da Fazenda Modelo   ~~~~~~~~~~~~~~~~~~~~~
#
# Autor: Luiz Carlos Estraviz Rodriguez
#        Otávio Magalhães Silva Souza
#        Departamento de Ciências Florestais
#        ESALQ/USP - 22/Set/2024
#
#   - Estimativas de inventário com amostragem de uma fase
#        Casual Simples (ACS)
#        Casual Estratificada (ACE)
#
# Linguagem de programação:
#       R (v 4.4.1)
#       package: forestinventory (v 1.0.0 2021-01-08 - Andreas Hill)
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list=ls(all=TRUE))                                   # Limpa memória
gc()
if (!require("remotes")){install.packages("remotes")}
if (!require(rio))      {remotes::install_github("gesistsa/rio")}
library(rio)
prjNome <- 'PRJ_InvModelo'
dirNome <- paste0('C:/GitRepo/', prjNome, '/DADOS/')
arqNome  <- paste0(dirNome, prjNome, '.xlsx')
talhoes  <- import(arqNome, which = "talhoes")
parcelas <- import(arqNome, which = "parcelas")
if(!require(forestinventory))  # Para melhor manipulação de dados e funções
install.packages("forestinventory")
library(forestinventory)
AreaTotal <- talhoes$area %>% sum             # Área total inventariada
# ACS <- onephase(formula  = MHDOM ~ 1,
ACS <- onephase(formula  = VTCC ~ 1,
data     = parcelas,
phase_id = list(phase.col = "fase", terrgrid.id = 1))
summary(ACS)
confint(ACS)
erro         <- 0.05                                   # Erro desejado
tamMedioParc <- mean(parcelas$areapar) / 10000               # em ha
N            <- round(AreaTotal / tamMedioParc , 0)
tamanhoIdealACS = function(x, N, erro){
media = x$estimation$estimate
var   = x$estimation$variance
n     = x$estimation$n2
t     = qt(1 - erro/2, n -1)
B     = erro * media
ndsej = round((N * var * t^2) / (N * B^2 + var * t^2), 0)
lista = cbind(media, B, ndsej) %>% as.data.frame
colnames(lista) = c('media', 'bound', 'ndsej')
return(lista)
}
nACS <- tamanhoIdealACS(ACS, N, erro)
IAS <- paste0(" usada: 1 parc/",
round( AreaTotal / ACS$estimation$n2, 0), " ha.")
IAI <- paste0("\n Necessárias p/ erro de ", erro*100, "%: 1 parc/",
round(AreaTotal / nACS$ndsej, 0), " ha.")
NotaDeRodape <- paste0(IAS, IAI)
quadroACS <- as.data.frame(
tibble(LimInf95   = confint(ACS)$ci$ci_lower_op,
Estimativa = ACS$estimation$estimate,
LimSup95   = confint(ACS)$ci$ci_upper_op,
Variância  = ACS$estimation$variance,
n          = ACS$estimation$n2))
quadroACS %>%
kbl(caption = paste0("Amostragem Casual Simples em ~",
round(AreaTotal, 0), " ha."), align = "r") %>%
kable_classic(full_width = F) %>%
footnote(general       = NotaDeRodape,
general_title = "Intensidade amostral",
footnote_as_chunk = T)
View(parcelas)
AreaTotal <- talhoes$area %>% sum             # Área total inventariada
# ACE <- onephase(formula  = MHDOM ~ 1,
ACE <- onephase(formula  = VTCC ~ 1,
data     = parcelas,
phase_id = list(phase.col = "fase", terrgrid.id = 1),
area     = list(sa.col = "idade", areas = c(3.7, 5.2)))
summary(ACE)
confint(ACE)
erro         <- 0.05                                  # Erro desejado
tamMedioParc <- mean(parcelas$areapar) / 10000               # em ha
N            <- round(AreaTotal / tamMedioParc, 0)
Nh           <- round(tapply(talhoes$area, talhoes$idade, FUN=sum) /
tamMedioParc, 0)
tamanhoIdealACE = function(x, N, Nh, erro){
media = sum( Nh * x$estimation$estimate ) / N
var   = x$estimation$variance
dh    = sqrt(var)
wh    = (Nh*dh) / sum(Nh*dh)    # desconsiderada diferença nos custos
B     = erro * media
ndsej = round(sum( (Nh^2 * var) / wh ) /
( (N^2  * B^2) / 4 + sum(Nh * var) ), 0)
lista = cbind(media, B, ndsej) %>% as.data.frame
colnames(lista) = c('media', 'bound', 'ndsej')
return(lista)
}
nACE <- tamanhoIdealACE(ACE, N, Nh, erro)
IAS <- paste0(" usada: 1 parc/",
round( AreaTotal / sum(ACE$estimation$n2), 0), " ha.")
IAI <- paste0("\n Necessárias p/ erro de ", erro*100, "%: 1 parc/",
round(AreaTotal / nACE$ndsej, 0), " ha.")
NotaDeRodape <- paste0(IAS, IAI)
quadroACE <- as.data.frame(
tibble(
Estrato    = ACE$estimation$area,
LimInf95   = confint(ACE)$ci$ci_lower_op,
Estimativa = ACE$estimation$estimate,
LimSup95   = confint(ACE)$ci$ci_upper_op,
Variância  = ACE$estimation$variance,
n          = ACE$estimation$n2))
quadroACE %>%
kbl(caption = paste0("Amostragem Casual Estratificada em ~",
round(AreaTotal, 0), " ha."), align = "r") %>%
kable_classic(full_width = F) %>%
footnote(general       = NotaDeRodape,
general_title = "Intensidade amostral",
footnote_as_chunk = T)
